
swagger: "2.0"
info:
  version: "1.0"
  title: "gureume-api-sam"
host: "api.gureu.me"
schemes:
- "https"
paths:
  /apps:
    get:
      produces:
      - "application/json"
      responses:
        '200':
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - CognitoUserPool: []
      x-amazon-apigateway-integration:
        uri:
          !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListAppsFunction.Arn}/
        requestTemplates: &json_request_template
          application/json: |
            #set($allParams = $input.params())
            {
            "body-json" : $input.json('$'),
            "params" : {
            #foreach($type in $allParams.keySet())
                #set($params = $allParams.get($type))
            "$type" : {
                #foreach($paramName in $params.keySet())
                "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                    #if($foreach.hasNext),#end
                #end
            }
                #if($foreach.hasNext),#end
            #end
            },
            "stage-variables" : {
            #foreach($key in $stageVariables.keySet())
            "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
            #end
            }
            }
        responses:
          default:
            statusCode: "200"
          .*type.*BadRequest.*:
            statusCode: "400"
            responseTemplates: &error_response_template
              application/json: |
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                  "error": {
                    "message": "$errorMessageObj.error.message",
                    "code" : "$errorMessageObj.error.code"
                  }
                }
          .*type.*NotFound.*:
            statusCode: "404"
            responseTemplates: *error_response_template
          (.*type.*InternalServerError.*)|(.+):
            statusCode: "500"
            responseTemplates: *error_response_template
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      produces:
      - "application/json"
      responses:
        '200':
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - CognitoUserPool: []
      x-amazon-apigateway-integration:
        uri:
          !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateAppFunction.Arn}/invocations
        requestTemplates: *json_request_template
        responses:
          default:
            statusCode: "200"
          .*type.*BadRequest.*:
            statusCode: "400"
            responseTemplates: *error_response_template
          .*type.*NotFound.*:
            statusCode: "404"
            responseTemplates: *error_response_template
          (.*type.*InternalServerError.*)|(.+):
            statusCode: "500"
            responseTemplates: *error_response_template
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /apps/{name}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        '200':
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - CognitoUserPool: []
      x-amazon-apigateway-integration:
        uri:
          !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DescribeAppFunction.Arn}/
        requestTemplates: *json_request_template
        responses:
          default:
            statusCode: "200"
          .*type.*BadRequest.*:
            statusCode: "400"
            responseTemplates: *error_response_template
          .*type.*NotFound.*:
            statusCode: "404"
            responseTemplates: *error_response_template
          (.*type.*InternalServerError.*)|(.+):
            statusCode: "500"
            responseTemplates: *error_response_template
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        '200':
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - CognitoUserPool: []
      x-amazon-apigateway-integration:
        uri:
          !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteAppFunction.Arn}/
        requestTemplates: *json_request_template
        responses:
          default:
            statusCode: "200"
          .*type.*BadRequest.*:
            statusCode: "400"
            responseTemplates: *error_response_template
          .*type.*NotFound.*:
            statusCode: "404"
            responseTemplates: *error_response_template
          (.*type.*InternalServerError.*)|(.+):
            statusCode: "500"
            responseTemplates: *error_response_template
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    patch:
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        '200':
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - CognitoUserPool: []
      x-amazon-apigateway-integration:
        uri:
          !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateAppFunction.Arn}/invocations
        requestTemplates: *json_request_template
        responses:
          default:
            statusCode: "200"
          .*type.*BadRequest.*:
            statusCode: "400"
            responseTemplates: *error_response_template
          .*type.*NotFound.*:
            statusCode: "404"
            responseTemplates: *error_response_template
          (.*type.*InternalServerError.*)|(.+):
            statusCode: "500"
            responseTemplates: *error_response_template
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /events/{name}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        '200':
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - CognitoUserPool: []
      x-amazon-apigateway-integration:
        uri:
          !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DescribeEventsFunction.Arn}/invocations
        requestTemplates: *json_request_template
        responses:
          default:
            statusCode: "200"
          .*type.*BadRequest.*:
            statusCode: "400"
            responseTemplates: *error_response_template
          .*type.*NotFound.*:
            statusCode: "404"
            responseTemplates: *error_response_template
          (.*type.*InternalServerError.*)|(.+):
            statusCode: "500"
            responseTemplates: *error_response_template
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /pipelines:
    get:
      produces:
      - "application/json"
      responses:
        '200':
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - CognitoUserPool: []
      x-amazon-apigateway-integration:
        uri:
          !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListPipelinesFunction.Arn}/invocations
        requestTemplates: *json_request_template
        responses:
          default:
            statusCode: "200"
          .*type.*BadRequest.*:
            statusCode: "400"
            responseTemplates: *error_response_template
          .*type.*NotFound.*:
            statusCode: "404"
            responseTemplates: *error_response_template
          (.*type.*InternalServerError.*)|(.+):
            statusCode: "500"
            responseTemplates: *error_response_template
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /pipelines/{name}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        '200':
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - CognitoUserPool: []
      x-amazon-apigateway-integration:
        uri:
          !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DescribePipelineFunction.Arn}/invocations
        requestTemplates: *json_request_template
        responses:
          default:
            statusCode: "200"
          .*type.*BadRequest.*:
            statusCode: "400"
            responseTemplates: *error_response_template
          .*type.*NotFound.*:
            statusCode: "404"
            responseTemplates: *error_response_template
          (.*type.*InternalServerError.*)|(.+):
            statusCode: "500"
            responseTemplates: *error_response_template
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        '200':
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - CognitoUserPool: []
      x-amazon-apigateway-integration:
        uri:
          !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePipelineFunction.Arn}/invocations
        requestTemplates: *json_request_template
        responses:
          default:
            statusCode: "200"
          .*type.*BadRequest.*:
            statusCode: "400"
            responseTemplates: *error_response_template
          .*type.*NotFound.*:
            statusCode: "404"
            responseTemplates: *error_response_template
          (.*type.*InternalServerError.*)|(.+):
            statusCode: "500"
            responseTemplates: *error_response_template
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        '200':
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - CognitoUserPool: []
      x-amazon-apigateway-integration:
        uri:
          !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeletePipelineFunction.Arn}/invocations
        requestTemplates: *json_request_template
        responses:
          default:
            statusCode: "200"
          .*type.*BadRequest.*:
            statusCode: "400"
            responseTemplates: *error_response_template
          .*type.*NotFound.*:
            statusCode: "404"
            responseTemplates: *error_response_template
          (.*type.*InternalServerError.*)|(.+):
            statusCode: "500"
            responseTemplates: *error_response_template
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    patch:
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        '200':
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - CognitoUserPool: []
      x-amazon-apigateway-integration:
        uri:
          !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdatePipelineFunction.Arn}/
        requestTemplates: *json_request_template
        responses:
          default:
            statusCode: "200"
          .*type.*BadRequest.*:
            statusCode: "400"
            responseTemplates: *error_response_template
          .*type.*NotFound.*:
            statusCode: "404"
            responseTemplates: *error_response_template
          (.*type.*InternalServerError.*)|(.+):
            statusCode: "500"
            responseTemplates: *error_response_template
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
securityDefinitions:
  CognitoUserPool:
    in: header
    type: apiKey
    name: Authorization
    x-amazon-apigateway-authtype: cognito_user_pools
    x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
            - 'arn:aws:cognito-idp:eu-west-1:789073296014:userpool/eu-west-1_MkM8NwiuN'
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
x-amazon-apigateway-binary-media-types:
- "application/octet-stream"
- "application/x-tar"
- "application/zip"
- "audio/basic"
- "audio/ogg"
- "audio/mp4"
- "audio/mpeg"
- "audio/wav"
- "audio/webm"
- "image/png"
- "image/jpg"
- "image/jpeg"
- "image/gif"
- "video/ogg"
- "video/mpeg"
- "video/webm"