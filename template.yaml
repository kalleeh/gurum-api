AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
    This SAM template creates the management API for the container platform.
    Last Modified: July 17th 2018
    Author: Karl Wallbom <wallbomk@amazon.com

Parameters:

  CUPArn:
    Description: ARN to the Cognito User Pool to use
    Type: String
    Default: "arn:aws:cognito-idp:eu-west-1:789073296014:userpool/eu-west-1_MkM8NwiuN"

  PlatformBucket:
    Description: S3 Bucket to get the product templates from
    Type: String
    Default: "storage-kalleh"

  PlatformRegion:
    Description: Region to deploy the platform resources in
    Type: String
    Default: "eu-west-1"

  PlatformPrefix:
    Description: String to use as prefix for platform resources
    Type: String
    Default: "gureume"

Globals:
  Function:
    Runtime: python3.6
    Timeout: 180
    Handler: index.handler
    Environment:
      Variables:
        PLATFORM_REGION: !Ref PlatformRegion
        PLATFORM_PREFIX: !Sub "${PlatformPrefix}-"
        PLATFORM_BUCKET: !Ref PlatformBucket
        PLATFORM_DEPLOYMENT_ROLE: !Ref DeploymentRole
  Api:
    EndpointConfiguration: REGIONAL

Resources:

  DeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "cloudformation.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
          - 
            Effect: "Allow"
            Principal: 
              AWS: 
                - !GetAtt CreateAppRole.Arn
                - !GetAtt CreatePipelineRole.Arn
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/PowerUserAccess
      - arn:aws:iam::aws:policy/IAMFullAccess

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: "gureume-api"
        host: "api.gureu.me"
        schemes:
        - "https"
        paths:
          /apps:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListApps.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                      "claims" : {
                        "email" : "$context.authorizer.claims['email']",
                        "groups" : "$context.authorizer.claims['cognito:groups']"
                      }
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
                - name: body
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/CreateAppRequest'
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateApp.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                      "claims" : {
                        "email" : "$context.authorizer.claims['email']",
                        "groups" : "$context.authorizer.claims['cognito:groups']"
                      },
                      "body-json" : $input.json('$')
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          /apps/{name}:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DescribeApp.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                      "claims" : {
                        "email" : "$context.authorizer.claims['email']",
                        "groups" : "$context.authorizer.claims['cognito:groups']"
                      },
                      "params" : {
                        "name" : "$input.params('name')"
                      }
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            delete:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteApp.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                      "claims" : {
                        "email" : "$context.authorizer.claims['email']",
                        "groups" : "$context.authorizer.claims['cognito:groups']"
                      },
                      "params" : {
                        "name" : "$input.params('name')"
                      }
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            patch:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateApp.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                      "claims" : {
                        "email" : "$context.authorizer.claims['email']",
                        "groups" : "$context.authorizer.claims['cognito:groups']"
                      },
                      "params" : {
                        "name" : "$input.params('name')"
                      },
                      "body-json" : $input.json('$')
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          /events/{name}:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DescribeEvents.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                      "claims" : {
                        "email" : "$context.authorizer.claims['email']",
                        "groups" : "$context.authorizer.claims['cognito:groups']"
                      },
                      "params" : {
                        "name" : "$input.params('name')"
                      }
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          /pipelines:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListPipelines.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                      "claims" : {
                        "email" : "$context.authorizer.claims['email']",
                        "groups" : "$context.authorizer.claims['cognito:groups']"
                      }
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
                - name: body
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/CreatePipelineRequest'
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePipeline.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                      "claims" : {
                        "email" : "$context.authorizer.claims['email']",
                        "groups" : "$context.authorizer.claims['cognito:groups']"
                      },
                      "body-json" : $input.json('$')
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          /pipelines/{name}:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DescribePipeline.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                      "claims" : {
                        "email" : "$context.authorizer.claims['email']",
                        "groups" : "$context.authorizer.claims['cognito:groups']"
                      },
                      "params" : {
                        "name" : "$input.params('name')"
                      }
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePipeline.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                      "claims" : {
                        "email" : "$context.authorizer.claims['email']",
                        "groups" : "$context.authorizer.claims['cognito:groups']"
                      },
                      "body-json" : $input.json('$')
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            delete:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeletePipeline.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                      "claims" : {
                        "email" : "$context.authorizer.claims['email']",
                        "groups" : "$context.authorizer.claims['cognito:groups']"
                      },
                      "params" : {
                        "name" : "$input.params('name')"
                      }
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            patch:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdatePipeline.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                      "claims" : {
                        "email" : "$context.authorizer.claims['email']",
                        "groups" : "$context.authorizer.claims['cognito:groups']"
                      },
                      "params" : {
                        "name" : "$input.params('name')"
                      },
                      "body-json" : $input.json('$')
                    }
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
        securityDefinitions:
          CognitoUserPool:
            in: header
            type: apiKey
            name: Authorization
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
                type: cognito_user_pools
                providerARNs:
                    - !Ref CUPArn
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
          CreateAppRequest:
            type: object
            properties:
              name:
                type: string
              tasks:
                type: int
              health_check_path:
                type: string
              image:
                type: string
            required:
              - name
              - tasks
              - health_check_path
          CreatePipelineRequest:
            type: object
            properties:
              name:
                type: string
              app_name:
                type: string
              app_dev:
                type: string
              app_test:
                type: string
              github_repo:
                type: string
              github_branch:
                type: string
              github_token:
                type: string
              github_user:
                type: string
            required:
              - name
              - app_name
              - github_repo
              - github_branch
              - github_token
              - github_user
        x-amazon-apigateway-binary-media-types:
        - "application/octet-stream"
        - "application/x-tar"
        - "application/zip"
        - "audio/basic"
        - "audio/ogg"
        - "audio/mp4"
        - "audio/mpeg"
        - "audio/wav"
        - "audio/webm"
        - "image/png"
        - "image/jpg"
        - "image/jpeg"
        - "image/gif"
        - "video/ogg"
        - "video/mpeg"
        - "video/webm"

  # Apps definition
  ListApps:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: apps.get
      CodeUri: src/
      Tracing: "Active"
      Events:
        ListApps:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /apps
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
              Resource:
                - '*'

  CreateApp:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: apps.post
      CodeUri: src/
      Tracing: "Active"
      Events:
        CreateApp:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /apps
            Method: post
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:CreateStack'
                - 'cloudformation:ListExports'
                - 'elasticloadbalancing:DescribeRules'
                - 'iam:PassRole'
              Resource:
                - '*'

  DescribeApp:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: apps_name.get
      CodeUri: src/
      Tracing: "Active"
      Events:
        DescribeApp:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /apps/{name}
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
              Resource:
                - '*'

  DeleteApp:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: apps_name.delete
      CodeUri: src/
      Tracing: "Active"
      Events:
        DeleteApp:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /apps/{name}
            Method: delete
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:DeleteStack'
              Resource:
                - '*'

  UpdateApp:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: apps_name.patch
      CodeUri: src/
      Tracing: "Active"
      Events:
        UpdateApp:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /apps/{name}
            Method: patch
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:UpdateStack'
                - 'iam:PassRole'
              Resource:
                - '*'

  # Pipelines definition
  ListPipelines:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: pipelines.get
      CodeUri: src/
      Tracing: "Active"
      Events:
        ListPipelines:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
              Resource:
                - '*'

  CreatePipeline:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: pipelines.post
      CodeUri: src/
      Tracing: "Active"
      Events:
        CreatePipeline:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines
            Method: post
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:CreateStack'
                - 'cloudformation:ListExports'
                - 'iam:PassRole'
              Resource:
                - '*'

  DescribePipeline:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: pipelines_name.get
      CodeUri: src/
      Tracing: "Active"
      Events:
        DescribePipeline:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines/{name}
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
              Resource:
                - '*'

  DeletePipeline:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: pipelines_name.delete
      CodeUri: src/
      Tracing: "Active"
      Events:
        DeletePipeline:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines/{name}
            Method: delete
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:DeleteStack'
              Resource:
                - '*'

  UpdatePipeline:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: pipelines_name.patch
      CodeUri: src/
      Tracing: "Active"
      Events:
        UpdatePipeline:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines/{name}
            Method: patch
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:UpdateStack'
                - 'iam:PassRole'
              Resource:
                - '*'

# Events definition
  DescribeEvents:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: events_name.get
      CodeUri: src/
      Tracing: "Active"
      Events:
        DescribeEvents:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /events/{name}
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:DescribeStackEvents'
              Resource:
                - '*'