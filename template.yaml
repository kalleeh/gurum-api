# This is a sample, non-production-ready template.
# 
# © 2019 Amazon Web Services, In​c. or its affiliates. All Rights Reserved.
# 
# This AWS Content is provided subject to the terms of the
# AWS Customer Agreement available at http://aws.amazon.com/agreement
# or other written agreement between Customer and either
# Amazon Web Services, Inc. or Amazon Web Services EMEA SARL or both.

AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
Description: >
    'This SAM template creates the management API for the container platform.
    Last Modified: July 3rd 2019
    Author: Karl Wallbom <wallbomk@amazon.com'

Parameters:

  PlatformPrefix:
    Description: String to use as prefix for platform resources
    Type: String
    Default: "gureume"

Globals:
  Function:
    Runtime: python3.7
    Timeout: 180
    Handler: index.handler
    Environment:
      Variables:
        PLATFORM_REGION: !Ref "AWS::Region"
        PLATFORM_PREFIX: !Sub "${PlatformPrefix}-"
        PLATFORM_BUCKET: !Ref ProductsBucket
        PLATFORM_DEPLOYMENT_ROLE: !GetAtt DeploymentRole.Arn

  Api:
    EndpointConfiguration: REGIONAL

Resources:

  #
  # Products Bucket
  #
  # Bucket to hold templates for apps, pipelines and services
  ProductsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  
  ProductsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ProductsBucket
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetObject
          - s3:List*
          Effect: Allow
          Resource:
          - Fn::Sub: arn:aws:s3:::${ProductsBucket}/*
          Principal:
            AWS:
              - !GetAtt CreateAppRole.Arn
              - !GetAtt UpdateAppRole.Arn
              - !GetAtt CreatePipelineRole.Arn
              - !GetAtt UpdatePipelineRole.Arn
              - !GetAtt CreateServiceRole.Arn
              - !GetAtt UpdateServiceRole.Arn

  #
  # Cognito and IAM
  #
  # Creates a user pool in cognito to auth against
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Sub ${PlatformPrefix}_users
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: 'OFF'
      EmailVerificationSubject: !Ref AWS::StackName

  # Creates a needed group in Cognito for Admin access
  UserPoolGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      Description: 'User pool group for Admin access'
      GroupName: !Sub ${PlatformPrefix}_admin_group
      Precedence: 0
      UserPoolId: !Ref UserPool

  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: !Sub ${PlatformPrefix}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  # Creates a federated Identity pool
  IdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      IdentityPoolName: !Sub ${PlatformPrefix}_idp
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # Create a role for unauthorized access to AWS resources. Very limited access.
  # Only allows users in the previously created Identity Pool
  CognitoUnAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: 'CognitoUnauthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:BulkPublish'
                  - 'cognito-sync:DescribeIdentityPoolUsage'
                  - 'cognito-sync:GetBulkPublishDetails'
                  - 'cognito-sync:GetCognitoEvents'
                  - 'cognito-sync:GetIdentityPoolConfiguration'
                  - 'cognito-sync:ListIdentityPoolUsage'
                  - 'cognito-sync:SetCognitoEvents'
                  - 'congito-sync:SetIdentityPoolConfiguration'
                Resource: !Sub 'arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/${IdentityPool}'

  # Create a role for authorized access to AWS resources.
  # Only allows users in the previously created Identity Pool
  CognitoAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: 'CognitoAuthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:BulkPublish'
                  - 'cognito-sync:DescribeIdentityPoolUsage'
                  - 'cognito-sync:GetBulkPublishDetails'
                  - 'cognito-sync:GetCognitoEvents'
                  - 'cognito-sync:GetIdentityPoolConfiguration'
                  - 'cognito-sync:ListIdentityPoolUsage'
                  - 'cognito-sync:SetCognitoEvents'
                  - 'congito-sync:SetIdentityPoolConfiguration'
                  - 'cognito-identity:DeleteIdentityPool'
                  - 'cognito-identity:DescribeIdentityPool'
                  - 'cognito-identity:GetIdentityPoolRoles'
                  - 'cognito-identity:GetOpenIdTokenForDeveloperIdentity'
                  - 'cognito-identity:ListIdentities'
                  - 'cognito-identity:LookupDeveloperIdentity'
                  - 'cognito-identity:MergeDeveloperIdentities'
                  - 'cognito-identity:UnlikeDeveloperIdentity'
                  - 'cognito-identity:UpdateIdentityPool'
                Resource: !Sub 'arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/${IdentityPool}'

  CognitoESAccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonESCognitoAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'es.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn
  
  DeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "cloudformation.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/PowerUserAccess
      - arn:aws:iam::aws:policy/IAMFullAccess

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:            
            Location: "swagger/swagger.yaml"

  ### Lambda Layers ###
  DependenciesLayerVersion:
    Type: "AWS::Serverless::LayerVersion"
    Properties:
      ContentUri: "lambda_layers/dependencies"
      CompatibleRuntimes: 
        - python3.6
        - python3.7
      Description: "Shared libraries across functions"
      LayerName: shared_layer
  
  XRayLayerVersion:
    Type: "AWS::Serverless::LayerVersion"
    Properties:
      ContentUri: "lambda_layers/aws-xray-sdk"
      CompatibleRuntimes: 
        - python3.6
        - python3.7
      Description: "AWS X-Ray SDK for Python"
      LayerName: xray_python_layer

  # Apps definition
  ListApps:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: list_apps.get
      CodeUri: src/apps
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        ListApps:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /apps
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
              Resource:
                - '*'

  CreateApp:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: create_app.post
      CodeUri: src/apps
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        CreateApp:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /apps
            Method: post
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:CreateStack'
                - 'cloudformation:ListExports'
                - 'elasticloadbalancing:DescribeRules'
                - 'iam:PassRole'
                - 'ssm:GetParametersByPath'
              Resource:
                - '*'

  DescribeApp:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: describe_app.get
      CodeUri: src/apps/name
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        DescribeApp:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /apps/{name}
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
              Resource:
                - '*'

  DeleteApp:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: delete_app.delete
      CodeUri: src/apps/name
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        DeleteApp:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /apps/{name}
            Method: delete
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:DeleteStack'
              Resource:
                - '*'

  UpdateApp:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: update_app.patch
      CodeUri: src/apps/name
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        UpdateApp:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /apps/{name}
            Method: patch
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:UpdateStack'
                - 'cloudformation:ListExports'
                - 'elasticloadbalancing:DescribeRules'
                - 'iam:PassRole'
                - 'ssm:GetParametersByPath'
              Resource:
                - '*'

# Events definition
  DescribeEvents:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: list_events.get
      CodeUri: src/events
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        DescribeEvents:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /events/{name}
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:DescribeStackEvents'
              Resource:
                - '*'
  
  # Pipelines definition
  ListPipelines:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: list_pipelines.get
      CodeUri: src/pipelines
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        ListPipelines:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
              Resource:
                - '*'

  CreatePipeline:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: create_pipeline.post
      CodeUri: src/pipelines
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        CreatePipeline:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines
            Method: post
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:CreateStack'
                - 'cloudformation:ListExports'
                - 'iam:PassRole'
              Resource:
                - '*'

  DescribePipeline:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: describe_pipeline.get
      CodeUri: src/pipelines/name
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        DescribePipeline:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines/{name}
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
              Resource:
                - '*'

  DeletePipeline:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: delete_pipeline.delete
      CodeUri: src/pipelines/name
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        DeletePipeline:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines/{name}
            Method: delete
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:DeleteStack'
              Resource:
                - '*'

  UpdatePipeline:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: update_pipeline.patch
      CodeUri: src/pipelines/name
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        UpdatePipeline:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines/{name}
            Method: patch
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:UpdateStack'
                - 'cloudformation:ListExports'
                - 'iam:PassRole'
              Resource:
                - '*'

  DescribePipelineState:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: describe_pipeline_state.get
      CodeUri: src/pipelines/name/states
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        DescribePipeline:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines/{name}/states
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
                - 'codepipeline:GetPipelineState'
              Resource:
                - '*'
  
  PutPipelineState:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: put_pipeline_state.put
      CodeUri: src/pipelines/name/states
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        DescribePipeline:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines/{name}/states
            Method: put
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
                - 'codepipeline:GetPipelineState'
                - 'codepipeline:PutApprovalResult'
              Resource:
                - '*'
  
  # Services definition
  ListServices:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: list_services.get
      CodeUri: src/services
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        ListServices:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /services
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
              Resource:
                - '*'

  CreateService:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: create_service.post
      CodeUri: src/services
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        CreateService:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /services
            Method: post
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:CreateStack'
                - 'cloudformation:ListExports'
                - 'iam:PassRole'
              Resource:
                - '*'

  DescribeService:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: describe_service.get
      CodeUri: src/services/name
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        DescribeService:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /services/{name}
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
              Resource:
                - '*'

  DeleteService:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: delete_service.delete
      CodeUri: src/services/name
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        DeleteService:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /services/{name}
            Method: delete
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:DeleteStack'
              Resource:
                - '*'

  UpdateService:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: update_service.patch
      CodeUri: src/services/name
      MemorySize: 1024
      Layers:
        - !Ref DependenciesLayerVersion
        - !Ref XRayLayerVersion
      Tracing: "Active"
      Events:
        UpdateService:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /services/{name}
            Method: patch
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:UpdateStack'
                - 'iam:PassRole'
              Resource:
                - '*'

  ############################
  #      SSM Parameters      #
  ############################

  CognitoUserPoolIDParam:
      Type: "AWS::SSM::Parameter"
      Properties:
          Name: "/gureume/api/cognito-user-pool-id"
          Type: "String"
          Value: !Ref UserPool
          Description: "Cognito User Pool ID to be used by clients."

  CognitoIdentityPoolIDParam:
      Type: "AWS::SSM::Parameter"
      Properties:
          Name: "/gureume/api/cognito-identity-pool-id"
          Type: "String"
          Value: !Ref IdentityPool
          Description: "Cognito User Pool ID to be used by clients."

  CognitoAppClientIDParam:
      Type: "AWS::SSM::Parameter"
      Properties:
          Name: "/gureume/api/cognito-app-client-id"
          Type: "String"
          Value: !Ref UserPoolClient
          Description: "Cognito App Client ID to be used by clients."

  APIGatewayProdEndpointParam:
      Type: "AWS::SSM::Parameter"
      Properties:
          Name: "/gureume/api/api-endpoint"
          Type: "String"
          Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/v1/"
          Description: "API Endpoint for the API."