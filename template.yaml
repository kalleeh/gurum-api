AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
    This SAM template creates the management API for the container platform.
    Last Modified: July 17th 2018
    Author: Karl Wallbom <wallbomk@amazon.com

Globals:
  Function:
    Runtime: python3.6
    Timeout: 180
    Handler: index.handler
    Environment:
      Variables:
        PLATFORM_REGION: "eu-west-1"
        PLATFORM_PREFIX: "gureume-"
        PLATFORM_NAME: "gureume"
        PLATFORM_ECS_CLUSTER: "gureume"
        PLATFORM_DEPLOYMENT_ROLE: "arn:aws:iam::789073296014:role/gureume-AppDeploymentRole-eu-west-1"
        COGNITO_USER_POOL: "eu-west-1_MkM8NwiuN"
        COGNITO_USER_POOL_ARN: "arn:aws:cognito-idp:eu-west-1:789073296014:userpool/eu-west-1_MkM8NwiuN"
  Api:
    EndpointConfiguration: REGIONAL
  
Resources:

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: "gureume-api-sam"
        host: "api.gureu.me"
        schemes:
        - "https"
        paths:
          /apps:
            get:
              produces:
              - "application/json"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListAppsFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            post:
              produces:
              - "application/json"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateAppFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /apps/{name}:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DescribeAppFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            delete:
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteAppFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            patch:
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateAppFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /events/{name}:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DescribeEventsFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /pipelines:
            get:
              produces:
              - "application/json"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListPipelinesFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /pipelines/{name}:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DescribePipelineFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            post:
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePipelineFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            delete:
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeletePipelineFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            patch:
              produces:
              - "application/json"
              parameters:
              - name: "name"
                in: "path"
                required: true
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - CognitoUserPool: []
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdatePipelineFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
        securityDefinitions:
          CognitoUserPool:
            in: header
            type: apiKey
            name: Authorization
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
                type: cognito_user_pools
                providerARNs:
                    - 'arn:aws:cognito-idp:eu-west-1:789073296014:userpool/eu-west-1_MkM8NwiuN'
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
        x-amazon-apigateway-binary-media-types:
        - "application/octet-stream"
        - "application/x-tar"
        - "application/zip"
        - "audio/basic"
        - "audio/ogg"
        - "audio/mp4"
        - "audio/mpeg"
        - "audio/wav"
        - "audio/webm"
        - "image/png"
        - "image/jpg"
        - "image/jpeg"
        - "image/gif"
        - "video/ogg"
        - "video/mpeg"
        - "video/webm"


  # Authorizer:
  #  Type: "AWS::ApiGateway::Authorizer"
  #  Properties:
  #    Type: "COGNITO_USER_POOLS"
  #    IdentitySource: "method.request.header.Auth"
  #    Name: "CognitoAuthorizer"
  #    ProviderARNs: ["arn:aws:cognito-idp:eu-west-1:789073296014:userpool/eu-west-1_MkM8NwiuN"]
  #    RestApiId:
  #      !Ref ApiGatewayApi

  # Apps definition
  ListAppsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: apps.get
      CodeUri: src/
      Tracing: "Active"
      Events:
        ListApps:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /apps
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
              Resource:
                - '*'

  CreateAppFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: apps.post
      CodeUri: src/
      Tracing: "Active"
      Events:
        CreateApp:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /apps
            Method: post
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:CreateStack'
              Resource:
                - '*'

  DescribeAppFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: apps_name.get
      CodeUri: src/
      Tracing: "Active"
      Events:
        DescribeApp:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /apps/{name}
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
              Resource:
                - '*'

  DeleteAppFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: apps_name.delete
      CodeUri: src/
      Tracing: "Active"
      Events:
        DeleteApp:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /apps/{name}
            Method: delete
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DeleteStack'
              Resource:
                - '*'

  UpdateAppFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: apps_name.patch
      CodeUri: src/
      Tracing: "Active"
      Events:
        UpdateApp:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /apps/{name}
            Method: patch
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:UpdateStack'
              Resource:
                - '*'

  # Pipelines definition
  ListPipelinesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: apps.get
      CodeUri: src/
      Tracing: "Active"
      Events:
        ListPipelines:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines
            Method: get

  CreatePipelineFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: pipelines.post
      CodeUri: src/
      Tracing: "Active"
      Events:
        CreatePipeline:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines
            Method: post

  DescribePipelineFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: pipelines_name.get
      CodeUri: src/
      Tracing: "Active"
      Events:
        DescribePipeline:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines/{name}
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
              Resource:
                - '*'

  DeletePipelineFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: pipelines_name.delete
      CodeUri: src/
      Tracing: "Active"
      Events:
        DeletePipeline:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines/{name}
            Method: delete

  UpdatePipelineFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: pipelines_name.patch
      CodeUri: src/
      Tracing: "Active"
      Events:
        UpdatePipeline:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /pipelines/{name}
            Method: patch

# Events definition
  DescribeEventsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: events_name.get
      CodeUri: src/
      Tracing: "Active"
      Events:
        DescribeEvents:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /events/{name}
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStacks'
              Resource:
                - '*'